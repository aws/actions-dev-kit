{
  "author": {
    "email": "cawsactionextensions@amazon.com",
    "name": "AEF-Team",
    "organization": true,
    "roles": [
      "author"
    ]
  },
  "bundled": {
    "@types/shelljs": "^0.8.11",
    "shelljs": "^0.8.5"
  },
  "description": "ADK Core",
  "docs": {
    "stability": "experimental"
  },
  "homepage": "",
  "jsiiVersion": "1.60.1 (build 2799dc8)",
  "license": "ISC",
  "metadata": {
    "jsii": {
      "pacmak": {
        "hasDefaultInterfaces": true
      },
      "rosetta": {
        "strict": true
      }
    }
  },
  "name": "@quokka/adk-core",
  "readme": {
    "markdown": "# `@quokka/adk-core`\n\n\"ADK Core\" offers action developers library interfaces which make action development easier. Action authors can interact with core metadata information about the action, workflows, output variables, artifacts, reports etc, making it easier for the action author to fully model the input and output of the action code.\n\n## Usage\n\n```\nconst adkCore = require('@quokka/adk-core');\n\nconst destinationBucket = core.getInput('DestinationBucketName')\n    # => Maps to the destination bucket configuration in Code.AWS workflow definition\nconst srcDir = core.getInput('SourcePath')\n    # => Maps to the src dir configuration in Code.AWS workflow definition\nconst cawsOrg = core.getCawsOrg()\n    # => Metadata information about CAWS org\nconst cawsProject = core.getProject()\n    # => Metadata information about CAWS project\nconst actionName = core.getActionName()\nconsole.log(\"Running action ${actionName}\")\nlet cmd = `aws s3 sync ${srcDir} s3://${destinationBucket}/${cawsOrg}/${cawsProject}/`\nconst cmdOutput = core.command(cmd)\nconsole.log(cmdOutput.stdout)\n\nif (cmdOutput.code != 0) {\n  core.setFailed(cmdOutput.stderr)\n} else {\n  core.setOutputVariable(\"Files\", cmdOutput.stdOut)\n}\n\n```\n"
  },
  "repository": {
    "type": "git",
    "url": "https://git.service.quokka.codes/v1/AEF-Team/ActionsDevKit/ActionsDevKit"
  },
  "schema": "jsii/0.10.0",
  "targets": {
    "dotnet": {
      "namespace": "Amazon.adk",
      "packageId": "Amazon.adk"
    },
    "java": {
      "maven": {
        "artifactId": "core",
        "groupId": "software.amazon.awsadk"
      },
      "package": "software.amazon.awsadk.core"
    },
    "js": {
      "npm": "@quokka/adk-core"
    },
    "python": {
      "classifiers": [
        "Framework :: AWS ADK",
        "Framework :: AWS ADK :: 1"
      ],
      "distName": "aws-adk.core",
      "module": "aws_adk.core"
    }
  },
  "types": {
    "@quokka/adk-core.ICommandOutput": {
      "assembly": "@quokka/adk-core",
      "docs": {
        "stability": "experimental",
        "summary": "Command output interface providing modeled command output parameters."
      },
      "fqn": "@quokka/adk-core.ICommandOutput",
      "kind": "interface",
      "locationInModule": {
        "filename": "lib/toolkit/sdk/core/core.ts",
        "line": 84
      },
      "name": "ICommandOutput",
      "properties": [
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "The command output exit code."
          },
          "locationInModule": {
            "filename": "lib/toolkit/sdk/core/core.ts",
            "line": 86
          },
          "name": "code",
          "type": {
            "primitive": "number"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "standard error captured output."
          },
          "locationInModule": {
            "filename": "lib/toolkit/sdk/core/core.ts",
            "line": 90
          },
          "name": "stderr",
          "type": {
            "primitive": "any"
          }
        },
        {
          "abstract": true,
          "docs": {
            "stability": "experimental",
            "summary": "standard output captured buffer."
          },
          "locationInModule": {
            "filename": "lib/toolkit/sdk/core/core.ts",
            "line": 88
          },
          "name": "stdout",
          "type": {
            "primitive": "any"
          }
        }
      ],
      "symbolId": "lib/toolkit/sdk/core/core:ICommandOutput"
    },
    "@quokka/adk-core.Utils": {
      "assembly": "@quokka/adk-core",
      "docs": {
        "stability": "experimental",
        "summary": "Utility class wrapping core methods."
      },
      "fqn": "@quokka/adk-core.Utils",
      "initializer": {
        "docs": {
          "stability": "experimental"
        }
      },
      "kind": "class",
      "locationInModule": {
        "filename": "lib/toolkit/sdk/core/core.ts",
        "line": 96
      },
      "methods": [
        {
          "docs": {
            "stability": "experimental",
            "summary": "View documentation at {@link allEnvs | `allEnvs`}."
          },
          "locationInModule": {
            "filename": "lib/toolkit/sdk/core/core.ts",
            "line": 123
          },
          "name": "allEnvs",
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "View documentation at {@link command | `command`}."
          },
          "locationInModule": {
            "filename": "lib/toolkit/sdk/core/core.ts",
            "line": 118
          },
          "name": "command",
          "parameters": [
            {
              "name": "cmd",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "fqn": "@quokka/adk-core.ICommandOutput"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "View documentation at {@link getEnvironmentVariable | `getEnvironmentVariable`}."
          },
          "locationInModule": {
            "filename": "lib/toolkit/sdk/core/core.ts",
            "line": 108
          },
          "name": "getEnvironmentVariable",
          "parameters": [
            {
              "name": "inputVar",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "View documentation at {@link getInput | `getInput`}."
          },
          "locationInModule": {
            "filename": "lib/toolkit/sdk/core/core.ts",
            "line": 98
          },
          "name": "getInput",
          "parameters": [
            {
              "name": "inputVar",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "string"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "View documentation at {@link getMultiLineInput | `getMultiLineInput`}."
          },
          "locationInModule": {
            "filename": "lib/toolkit/sdk/core/core.ts",
            "line": 103
          },
          "name": "getMultiLineInput",
          "parameters": [
            {
              "name": "inputVar",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        },
        {
          "docs": {
            "stability": "experimental",
            "summary": "View documentation at {@link setOutput | `setOutput`}."
          },
          "locationInModule": {
            "filename": "lib/toolkit/sdk/core/core.ts",
            "line": 113
          },
          "name": "setOutput",
          "parameters": [
            {
              "name": "varName",
              "type": {
                "primitive": "string"
              }
            },
            {
              "name": "varValue",
              "type": {
                "primitive": "string"
              }
            }
          ],
          "returns": {
            "type": {
              "primitive": "any"
            }
          },
          "static": true
        }
      ],
      "name": "Utils",
      "symbolId": "lib/toolkit/sdk/core/core:Utils"
    }
  },
  "version": "0.34.0",
  "fingerprint": "gF9QEN4/YsISf6yH0wC8tW9hf2TAX6Tpy1HfJxpoq9I="
}
